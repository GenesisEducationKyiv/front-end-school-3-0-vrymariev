// @generated by protoc-gen-es v1.3.0 with parameter "target=ts,import_extension=.ts"
// @generated from file proto/music_service.proto (package music, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message music.Empty
 */
export class Empty extends Message<Empty> {
  constructor(data?: PartialMessage<Empty>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "music.Empty";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Empty {
    return new Empty().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Empty {
    return new Empty().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Empty {
    return new Empty().fromJsonString(jsonString, options);
  }

  static equals(a: Empty | PlainMessage<Empty> | undefined, b: Empty | PlainMessage<Empty> | undefined): boolean {
    return proto3.util.equals(Empty, a, b);
  }
}

/**
 * @generated from message music.GetTrackBySlugRequest
 */
export class GetTrackBySlugRequest extends Message<GetTrackBySlugRequest> {
  /**
   * @generated from field: string slug = 1;
   */
  slug = "";

  constructor(data?: PartialMessage<GetTrackBySlugRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "music.GetTrackBySlugRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "slug", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetTrackBySlugRequest {
    return new GetTrackBySlugRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetTrackBySlugRequest {
    return new GetTrackBySlugRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetTrackBySlugRequest {
    return new GetTrackBySlugRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetTrackBySlugRequest | PlainMessage<GetTrackBySlugRequest> | undefined, b: GetTrackBySlugRequest | PlainMessage<GetTrackBySlugRequest> | undefined): boolean {
    return proto3.util.equals(GetTrackBySlugRequest, a, b);
  }
}

/**
 * @generated from message music.AddTrackRequest
 */
export class AddTrackRequest extends Message<AddTrackRequest> {
  /**
   * @generated from field: string title = 1;
   */
  title = "";

  /**
   * @generated from field: string artist = 2;
   */
  artist = "";

  /**
   * @generated from field: string album = 3;
   */
  album = "";

  /**
   * @generated from field: repeated string genres = 4;
   */
  genres: string[] = [];

  /**
   * @generated from field: string coverImage = 5;
   */
  coverImage = "";

  /**
   * @generated from field: string audioFile = 6;
   */
  audioFile = "";

  constructor(data?: PartialMessage<AddTrackRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "music.AddTrackRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "artist", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "album", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "genres", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 5, name: "coverImage", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "audioFile", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AddTrackRequest {
    return new AddTrackRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AddTrackRequest {
    return new AddTrackRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AddTrackRequest {
    return new AddTrackRequest().fromJsonString(jsonString, options);
  }

  static equals(a: AddTrackRequest | PlainMessage<AddTrackRequest> | undefined, b: AddTrackRequest | PlainMessage<AddTrackRequest> | undefined): boolean {
    return proto3.util.equals(AddTrackRequest, a, b);
  }
}

/**
 * @generated from message music.UpdateTrackRequest
 */
export class UpdateTrackRequest extends Message<UpdateTrackRequest> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string title = 2;
   */
  title = "";

  /**
   * @generated from field: string artist = 3;
   */
  artist = "";

  /**
   * @generated from field: string album = 4;
   */
  album = "";

  /**
   * @generated from field: repeated string genres = 5;
   */
  genres: string[] = [];

  /**
   * @generated from field: string coverImage = 6;
   */
  coverImage = "";

  /**
   * @generated from field: string audioFile = 7;
   */
  audioFile = "";

  constructor(data?: PartialMessage<UpdateTrackRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "music.UpdateTrackRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "artist", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "album", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "genres", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 6, name: "coverImage", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "audioFile", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateTrackRequest {
    return new UpdateTrackRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateTrackRequest {
    return new UpdateTrackRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateTrackRequest {
    return new UpdateTrackRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateTrackRequest | PlainMessage<UpdateTrackRequest> | undefined, b: UpdateTrackRequest | PlainMessage<UpdateTrackRequest> | undefined): boolean {
    return proto3.util.equals(UpdateTrackRequest, a, b);
  }
}

/**
 * @generated from message music.DeleteTrackRequest
 */
export class DeleteTrackRequest extends Message<DeleteTrackRequest> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  constructor(data?: PartialMessage<DeleteTrackRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "music.DeleteTrackRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteTrackRequest {
    return new DeleteTrackRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteTrackRequest {
    return new DeleteTrackRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteTrackRequest {
    return new DeleteTrackRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteTrackRequest | PlainMessage<DeleteTrackRequest> | undefined, b: DeleteTrackRequest | PlainMessage<DeleteTrackRequest> | undefined): boolean {
    return proto3.util.equals(DeleteTrackRequest, a, b);
  }
}

/**
 * @generated from message music.DeleteTracksRequest
 */
export class DeleteTracksRequest extends Message<DeleteTracksRequest> {
  /**
   * @generated from field: repeated string ids = 1;
   */
  ids: string[] = [];

  constructor(data?: PartialMessage<DeleteTracksRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "music.DeleteTracksRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "ids", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteTracksRequest {
    return new DeleteTracksRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteTracksRequest {
    return new DeleteTracksRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteTracksRequest {
    return new DeleteTracksRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteTracksRequest | PlainMessage<DeleteTracksRequest> | undefined, b: DeleteTracksRequest | PlainMessage<DeleteTracksRequest> | undefined): boolean {
    return proto3.util.equals(DeleteTracksRequest, a, b);
  }
}

/**
 * @generated from message music.UploadTrackFileRequest
 */
export class UploadTrackFileRequest extends Message<UploadTrackFileRequest> {
  /**
   * @generated from field: bytes file = 1;
   */
  file = new Uint8Array(0);

  /**
   * @generated from field: string filename = 2;
   */
  filename = "";

  constructor(data?: PartialMessage<UploadTrackFileRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "music.UploadTrackFileRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "file", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 2, name: "filename", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UploadTrackFileRequest {
    return new UploadTrackFileRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UploadTrackFileRequest {
    return new UploadTrackFileRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UploadTrackFileRequest {
    return new UploadTrackFileRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UploadTrackFileRequest | PlainMessage<UploadTrackFileRequest> | undefined, b: UploadTrackFileRequest | PlainMessage<UploadTrackFileRequest> | undefined): boolean {
    return proto3.util.equals(UploadTrackFileRequest, a, b);
  }
}

/**
 * @generated from message music.DeleteTrackFileRequest
 */
export class DeleteTrackFileRequest extends Message<DeleteTrackFileRequest> {
  /**
   * @generated from field: string file = 1;
   */
  file = "";

  constructor(data?: PartialMessage<DeleteTrackFileRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "music.DeleteTrackFileRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "file", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteTrackFileRequest {
    return new DeleteTrackFileRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteTrackFileRequest {
    return new DeleteTrackFileRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteTrackFileRequest {
    return new DeleteTrackFileRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteTrackFileRequest | PlainMessage<DeleteTrackFileRequest> | undefined, b: DeleteTrackFileRequest | PlainMessage<DeleteTrackFileRequest> | undefined): boolean {
    return proto3.util.equals(DeleteTrackFileRequest, a, b);
  }
}

/**
 * @generated from message music.DeleteResponse
 */
export class DeleteResponse extends Message<DeleteResponse> {
  /**
   * @generated from field: string message = 1;
   */
  message = "";

  constructor(data?: PartialMessage<DeleteResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "music.DeleteResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteResponse {
    return new DeleteResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteResponse {
    return new DeleteResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteResponse {
    return new DeleteResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteResponse | PlainMessage<DeleteResponse> | undefined, b: DeleteResponse | PlainMessage<DeleteResponse> | undefined): boolean {
    return proto3.util.equals(DeleteResponse, a, b);
  }
}

/**
 * @generated from message music.TrackFileResponse
 */
export class TrackFileResponse extends Message<TrackFileResponse> {
  /**
   * @generated from field: string url = 1;
   */
  url = "";

  constructor(data?: PartialMessage<TrackFileResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "music.TrackFileResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TrackFileResponse {
    return new TrackFileResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TrackFileResponse {
    return new TrackFileResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TrackFileResponse {
    return new TrackFileResponse().fromJsonString(jsonString, options);
  }

  static equals(a: TrackFileResponse | PlainMessage<TrackFileResponse> | undefined, b: TrackFileResponse | PlainMessage<TrackFileResponse> | undefined): boolean {
    return proto3.util.equals(TrackFileResponse, a, b);
  }
}

/**
 * @generated from message music.ListTracksRequest
 */
export class ListTracksRequest extends Message<ListTracksRequest> {
  /**
   * @generated from field: int32 page = 1;
   */
  page = 0;

  /**
   * @generated from field: int32 limit = 2;
   */
  limit = 0;

  /**
   * @generated from field: string sort = 3;
   */
  sort = "";

  /**
   * @generated from field: string order = 4;
   */
  order = "";

  /**
   * @generated from field: string search = 5;
   */
  search = "";

  /**
   * @generated from field: string genre = 6;
   */
  genre = "";

  /**
   * @generated from field: string artist = 7;
   */
  artist = "";

  constructor(data?: PartialMessage<ListTracksRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "music.ListTracksRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "page", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "limit", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "sort", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "order", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "search", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "genre", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "artist", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListTracksRequest {
    return new ListTracksRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListTracksRequest {
    return new ListTracksRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListTracksRequest {
    return new ListTracksRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListTracksRequest | PlainMessage<ListTracksRequest> | undefined, b: ListTracksRequest | PlainMessage<ListTracksRequest> | undefined): boolean {
    return proto3.util.equals(ListTracksRequest, a, b);
  }
}

/**
 * @generated from message music.Track
 */
export class Track extends Message<Track> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string title = 2;
   */
  title = "";

  /**
   * @generated from field: string artist = 3;
   */
  artist = "";

  /**
   * @generated from field: string album = 4;
   */
  album = "";

  /**
   * @generated from field: repeated string genres = 5;
   */
  genres: string[] = [];

  /**
   * @generated from field: string slug = 6;
   */
  slug = "";

  /**
   * @generated from field: string coverImage = 7;
   */
  coverImage = "";

  /**
   * @generated from field: string audioFile = 8;
   */
  audioFile = "";

  /**
   * @generated from field: string createdAt = 9;
   */
  createdAt = "";

  /**
   * @generated from field: string updatedAt = 10;
   */
  updatedAt = "";

  constructor(data?: PartialMessage<Track>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "music.Track";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "artist", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "album", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "genres", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 6, name: "slug", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "coverImage", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "audioFile", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "createdAt", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "updatedAt", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Track {
    return new Track().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Track {
    return new Track().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Track {
    return new Track().fromJsonString(jsonString, options);
  }

  static equals(a: Track | PlainMessage<Track> | undefined, b: Track | PlainMessage<Track> | undefined): boolean {
    return proto3.util.equals(Track, a, b);
  }
}

/**
 * @generated from message music.Meta
 */
export class Meta extends Message<Meta> {
  /**
   * @generated from field: int32 total = 1;
   */
  total = 0;

  /**
   * @generated from field: int32 page = 2;
   */
  page = 0;

  /**
   * @generated from field: int32 limit = 3;
   */
  limit = 0;

  /**
   * @generated from field: int32 totalPages = 4;
   */
  totalPages = 0;

  constructor(data?: PartialMessage<Meta>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "music.Meta";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "total", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "page", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "limit", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "totalPages", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Meta {
    return new Meta().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Meta {
    return new Meta().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Meta {
    return new Meta().fromJsonString(jsonString, options);
  }

  static equals(a: Meta | PlainMessage<Meta> | undefined, b: Meta | PlainMessage<Meta> | undefined): boolean {
    return proto3.util.equals(Meta, a, b);
  }
}

/**
 * @generated from message music.ListTracksResponse
 */
export class ListTracksResponse extends Message<ListTracksResponse> {
  /**
   * @generated from field: repeated music.Track data = 1;
   */
  data: Track[] = [];

  /**
   * @generated from field: music.Meta meta = 2;
   */
  meta?: Meta;

  constructor(data?: PartialMessage<ListTracksResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "music.ListTracksResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data", kind: "message", T: Track, repeated: true },
    { no: 2, name: "meta", kind: "message", T: Meta },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListTracksResponse {
    return new ListTracksResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListTracksResponse {
    return new ListTracksResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListTracksResponse {
    return new ListTracksResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListTracksResponse | PlainMessage<ListTracksResponse> | undefined, b: ListTracksResponse | PlainMessage<ListTracksResponse> | undefined): boolean {
    return proto3.util.equals(ListTracksResponse, a, b);
  }
}

/**
 * @generated from message music.GenresResponse
 */
export class GenresResponse extends Message<GenresResponse> {
  /**
   * @generated from field: repeated string genres = 1;
   */
  genres: string[] = [];

  constructor(data?: PartialMessage<GenresResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "music.GenresResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "genres", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GenresResponse {
    return new GenresResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GenresResponse {
    return new GenresResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GenresResponse {
    return new GenresResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GenresResponse | PlainMessage<GenresResponse> | undefined, b: GenresResponse | PlainMessage<GenresResponse> | undefined): boolean {
    return proto3.util.equals(GenresResponse, a, b);
  }
}

/**
 * Track stream request
 *
 * @generated from message music.ActiveTrackRequest
 */
export class ActiveTrackRequest extends Message<ActiveTrackRequest> {
  constructor(data?: PartialMessage<ActiveTrackRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "music.ActiveTrackRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ActiveTrackRequest {
    return new ActiveTrackRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ActiveTrackRequest {
    return new ActiveTrackRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ActiveTrackRequest {
    return new ActiveTrackRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ActiveTrackRequest | PlainMessage<ActiveTrackRequest> | undefined, b: ActiveTrackRequest | PlainMessage<ActiveTrackRequest> | undefined): boolean {
    return proto3.util.equals(ActiveTrackRequest, a, b);
  }
}

/**
 * @generated from message music.ActiveTrackResponse
 */
export class ActiveTrackResponse extends Message<ActiveTrackResponse> {
  /**
   * @generated from field: string title = 1;
   */
  title = "";

  constructor(data?: PartialMessage<ActiveTrackResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "music.ActiveTrackResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ActiveTrackResponse {
    return new ActiveTrackResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ActiveTrackResponse {
    return new ActiveTrackResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ActiveTrackResponse {
    return new ActiveTrackResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ActiveTrackResponse | PlainMessage<ActiveTrackResponse> | undefined, b: ActiveTrackResponse | PlainMessage<ActiveTrackResponse> | undefined): boolean {
    return proto3.util.equals(ActiveTrackResponse, a, b);
  }
}

